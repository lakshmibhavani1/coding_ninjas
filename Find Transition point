You are given a sorted array of size n, containing only numbers 0 and 1, you have to find the transition point of the given input array. The transition point is a point where “0” ends and “1” begins.
If there are no 1's in the input array then print -1.
Note: Expected time complexity is O(log n).
Input Format :
The first line of input contains the size of the input array(n) and the following line of input contains n space-separated integer elements of the input array.
Output format :
The only output line contains the index of transition point in the input array.
Constraints :
 0 <= n <= 10^6
Sample Input 1 :
5
0 0 0 1 1
Sample Output 1 :
3
Sample Input 2 :
2
0 0
Sample Output 2 :
-1

10
0 0 0 0 0 0 0 0 0 1

6
0 0 0 1 1 1

2
0 0


import java.util.Scanner;

public class Main {

	
	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
        int n = scan.nextInt();
        int[] arr = new int[n];
        
        for(int i=0;i<n;i++){
            arr[i] = scan.nextInt();
        }
        int low = 0;
        int high = arr.length-1;
        int val = binsearch(arr,low,high);
        System.out.println(val);
        
       return; 
	}
    
    public static int binsearch(int[] arr, int low, int high){
        
        while(low <=  high){
            
            int mid = (low+high)/2;
            
            if(arr[mid] == 0){
                low = mid+1;
            }
            else if(arr[mid] == 1){
                if( mid==0 || mid>0 && arr[mid-1] == 0){
                    //System.out.println(mid);
                	return mid;
                }
                else
                	high = mid-1;
            }
        }
        return -1;
    }

}
